name: Test, build and publish artefacts and documentation

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+b[0-9]+'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-24.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      job_status: ${{ job.status }}
    steps:
      - name: Checkout project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@440c8c1cb0ed28b9f43e4d1d670870f059653174
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          generateReleaseNotes: true
          draft: false
          prerelease: ${{ contains(github.ref_name ,'b') }}


  build_and_test:
    name: Test and build artefacts
    needs: create_release
    outputs:
      job_status: ${{ job.status }}
    strategy:
      max-parallel: 2
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-24.04
            python-version: "3.12"
          - os: ubuntu-22.04
            python-version: "3.11"
          - os: ubuntu-22.04
            python-version: "3.10"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: '**/pyproject.toml'

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt -y install python3-gdal libgdal-dev

      - name: Install python dependencies
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          python3 -m pip install --upgrade build bump2version "gdal==$(gdal-config --version)"
          bump2version --current-version 0.0.0 --new-version ${{ github.ref_name }} patch
          pip install -e .

      - name: Run unit tests
        run: |
          source .venv/bin/activate
          pip install -e .[test]
          coverage run -m pytest
          coverage report -m

      - name: Build unit tests report
        if: "! contains(github.ref_name,'b') && matrix.os == 'ubuntu-24.04' && matrix.python-version == '3.12'"
        run: |
          source .venv/bin/activate
          coverage html -d target/docs/tests/
          rm target/docs/tests/.gitignore

      - name: Build package
        if: "matrix.os == 'ubuntu-24.04' && matrix.python-version == '3.12'"
        run: |
          source .venv/bin/activate
          python3 -m build

      - name: Build documentation
        if: "! contains(github.ref_name,'b') && matrix.os == 'ubuntu-24.04' && matrix.python-version == '3.12'"
        run: |
          source .venv/bin/activate
          pip install -e .[doc]
          pdoc -d google -o target/docs/ ocsge_pv

      - name: Upload packages
        if: "matrix.os == 'ubuntu-24.04' && matrix.python-version == '3.12'"
        uses: actions/upload-artifact@v4
        with:
          name: dist-py3
          path: dist/
          if-no-files-found: error
          retention-days: 1

      - name: Publish documentation
        if: "! contains(github.ref_name,'b') && matrix.os == 'ubuntu-24.04' && matrix.python-version == '3.12'"
        run: |
          source .venv/bin/activate
          pip install -r docs/requirements.txt
          git config user.name github-actions
          git config user.email github-actions@github.com
          cd target/
          mike deploy --push --update-aliases --branch gh-pages -t "Version ${{ github.ref_name }}" ${{ github.ref_name }} latest
          mike set-default --push --branch gh-pages ${{ github.ref_name }}

  build_and_publish_docker:
    name: Build docker image and push it to github repository
    needs: build_and_test
    if: "always() && needs.create_release.outputs.job_status == 'success' && needs.build_and_test.outputs.job_status == 'success'"
    outputs:
      job_status: ${{ job.status }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      
      - name: Log in to GitHub Container Repository
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Docker metadata
        id: docker_mtd
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804
        with:
          images: ${{ env.REGISTRY }/${{ env.IMAGE_NAME }}
          labels:
            org.opencontainers.image.vendor=IGN (Institut national de l’information géographique et forestière) (https://www.ign.fr)
            org.opencontainers.image.base.name=docker.io/library/ubuntu:24.04

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: docker_push
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4
        with:
          context: .
          push: true
          tags: ${{ steps.docker_mtd.outputs.tags }}
          labels: ${{ steps.docker_mtd.outputs.labels }}
      
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@c074443f1aee8d4aeeae555aebba3282517141b2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.docker_push.outputs.digest }}
          push-to-registry: true


  delete_version:
    name: Remove release and tag if error occured
    needs: build_and_test
    if: "always() && needs.create_release.outputs.job_status == 'success' && needs.build_and_test.outputs.job_status != 'success'"
    runs-on: ubuntu-latest

    steps:
      - name: Remove release and tag
        uses: dev-drprasad/delete-tag-and-release@v1.1
        with:
          tag_name: ${{ github.ref_name }}
          delete_release: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
